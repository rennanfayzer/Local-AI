import os
import logging
from typing import Dict, Any, List
from .base import BaseAgent, register_agent

logger = logging.getLogger(__name__)

@register_agent
class ReflexivoAgent(BaseAgent):
    """
    Agente especializado em an√°lise reflexiva e planejamento
    
    Capacidades:
    - An√°lise de problemas complexos
    - Decomposi√ß√£o de tarefas 
    - Planejamento estrat√©gico
    - Auto-reflex√£o e meta-cogni√ß√£o
    - Identifica√ß√£o de riscos e oportunidades
    - Facilita√ß√£o de tomada de decis√£o
    """
    
    def __init__(self):
        super().__init__(
            name="reflexivo",
            default_model=os.getenv("REFLEX_MODEL", "phi3:3.8b"),
            capabilities=[
                "analysis",
                "planning", 
                "reflection",
                "risk_assessment",
                "decision_support",
                "problem_decomposition",
                "strategic_thinking"
            ]
        )
    
    def get_system_prompt(self) -> str:
        """Prompt especializado para an√°lise reflexiva"""
        manifesto = self.load_prompt_file("manifesto_sincerta.md")
        
        return f"""Voc√™ √© o agente REFLEXIVO - um facilitador de pensamento estrat√©gico e an√°lise profunda.

**MANIFESTO SINCERTA:**
{manifesto}

**METODOLOGIA REFLEXIVA:**

1. **ESCUTA ATIVA**: Identifique o problema real por tr√°s da pergunta
2. **AN√ÅLISE SIST√äMICA**: Explore conex√µes, depend√™ncias e impactos
3. **M√öLTIPLAS PERSPECTIVAS**: Considere diferentes √¢ngulos e stakeholders
4. **PENSAMENTO CR√çTICO**: Questione premissas e identifique vieses
5. **S√çNTESE CONSTRUTIVA**: Transforme insights em a√ß√µes pr√°ticas

**FORMATO DE RESPOSTA:**
```
üéØ PROBLEMA IDENTIFICADO
[Reformula√ß√£o clara do desafio central]

üîç AN√ÅLISE PROFUNDA  
[Fatores, causas raiz, contexto]

‚öñÔ∏è TRADE-OFFS E RISCOS
[Consequ√™ncias, limita√ß√µes, oportunidades]

üöÄ PLANO DE A√á√ÉO
[Passos concretos, priorizados e mensur√°veis]

‚úÖ CHECKLIST DE VALIDA√á√ÉO
[Crit√©rios de sucesso e pontos de verifica√ß√£o]
```

**PRINC√çPIOS:**
- Honestidade brutal com empatia genu√≠na
- Perguntas que provocam insights profundos  
- Foco em solu√ß√µes pr√°ticas e acion√°veis
- Reconhe√ßa limita√ß√µes e incertezas
- Stimule auto-reflex√£o no usu√°rio

Seja um espelho inteligente que revela clareza onde h√° confus√£o."""
    
    async def process_message(self, message: str, context: Dict[str, Any] = None) -> str:
        """Processamento especializado para an√°lise reflexiva"""
        
        message_lower = message.lower()
        
        # An√°lise de problemas
        if any(keyword in message_lower for keyword in ["problema", "dificuldade", "desafio", "bloqueio", "stuck"]):
            return await self._handle_problem_analysis(message, context)
        
        # Planejamento e estrat√©gia
        if any(keyword in message_lower for keyword in ["plano", "estrat√©gia", "como", "passos", "roadmap"]):
            return await self._handle_strategic_planning(message, context)
        
        # Tomada de decis√£o
        if any(keyword in message_lower for keyword in ["decis√£o", "escolha", "op√ß√£o", "dilema", "vs", "ou"]):
            return await self._handle_decision_support(message, context)
        
        # Auto-reflex√£o
        if any(keyword in message_lower for keyword in ["reflex√£o", "pensar", "analisar", "entender", "porque"]):
            return await self._handle_self_reflection(message, context)
        
        # Caso padr√£o
        return None
    
    async def _handle_problem_analysis(self, message: str, context: Dict[str, Any]) -> str:
        """An√°lise profunda de problemas"""
        analysis_prompt = f"""
MISS√ÉO: An√°lise sist√™mica de problema
CONTEXTO DO USU√ÅRIO: {message}

FRAMEWORK DE AN√ÅLISE:
1. **ROOT CAUSE ANALYSIS**: V√° al√©m dos sintomas
2. **5 WHYS**: Descasque as camadas do problema  
3. **STAKEHOLDER MAPPING**: Quem √© impactado e como?
4. **CONSTRAINT THEORY**: Qual √© o gargalo real?
5. **SYSTEMS THINKING**: Como as partes se conectam?

PERGUNTAS REFLEXIVAS:
- O que voc√™ realmente quer alcan√ßar?
- Que premissas podem estar erradas?  
- Qual √© o custo de N√ÉO resolver isso?
- Onde voc√™ j√° teve sucesso com problemas similares?

ENTREGA: Reformula√ß√£o do problema + an√°lise de causas + plano inicial
"""
        
        messages = [
            {"role": "system", "content": self.get_system_prompt()},
            {"role": "user", "content": analysis_prompt}
        ]
        
        return await self.call_ollama(context.get("model", self.default_model), messages)
    
    async def _handle_strategic_planning(self, message: str, context: Dict[str, Any]) -> str:
        """Planejamento estrat√©gico e roadmaps"""
        planning_prompt = f"""
MISS√ÉO: Planejamento estrat√©gico e execu√ß√£o
CONTEXTO: {message}

METODOLOGIA ESTRAT√âGICA:
1. **VIS√ÉO CLARA**: Onde queremos chegar?
2. **SITUA√á√ÉO ATUAL**: Onde estamos agora? (gap analysis)
3. **RECURSOS**: Tempo, pessoas, budget, conhecimento
4. **RISCOS**: O que pode dar errado? Planos B/C
5. **MILESTONES**: Marcos mensur√°veis e deadlines
6. **SUCCESS METRICS**: Como medir progresso?

FRAMEWORK DE PRIORIZA√á√ÉO:
- IMPACT vs EFFORT matrix
- MoSCoW (Must/Should/Could/Won't)
- ICE Score (Impact, Confidence, Ease)

T√âCNICAS DE EXECU√á√ÉO:
- Timeboxing e sprints
- Feedback loops r√°pidos  
- Fail fast, learn faster
- Progressive disclosure

ENTREGA: Roadmap detalhado + crit√©rios de sucesso + plano de conting√™ncia
"""
        
        messages = [
            {"role": "system", "content": self.get_system_prompt()},
            {"role": "user", "content": planning_prompt}
        ]
        
        return await self.call_ollama(context.get("model", self.default_model), messages)
    
    async def _handle_decision_support(self, message: str, context: Dict[str, Any]) -> str:
        """Suporte √† tomada de decis√£o"""
        decision_prompt = f"""
MISS√ÉO: Facilita√ß√£o de tomada de decis√£o
DILEMA: {message}

FRAMEWORK DE DECIS√ÉO:
1. **CLARIFICA√á√ÉO**: Qual decis√£o precisa ser tomada? Por quando?
2. **CRIT√âRIOS**: Que fatores s√£o importantes? (peso relativo)
3. **ALTERNATIVAS**: Quais s√£o todas as op√ß√µes? (incluindo n√£o-√≥bvias)
4. **CONSEQU√äNCIAS**: Cen√°rios otimista/realista/pessimista
5. **REVERSIBILIDADE**: Decisions are 1-way or 2-way doors?
6. **STAKEHOLDERS**: Quem precisa comprar a ideia?

T√âCNICAS ANAL√çTICAS:
- Pros/Cons weighted matrix
- Decision trees para cen√°rios complexos  
- Regret minimization framework
- 10-10-10 rule (10 min/months/years impact)

VIESES COGNITIVOS A EVITAR:
- Anchoring bias (primeira op√ß√£o)
- Confirmation bias (s√≥ dados favor√°veis)
- Sunk cost fallacy (investimento passado)
- Analysis paralysis (perfection over progress)

ENTREGA: Matriz de decis√£o + recomenda√ß√£o fundamentada + plano de implementa√ß√£o
"""
        
        messages = [
            {"role": "system", "content": self.get_system_prompt()},
            {"role": "user", "content": decision_prompt}
        ]
        
        return await self.call_ollama(context.get("model", self.default_model), messages)
    
    async def _handle_self_reflection(self, message: str, context: Dict[str, Any]) -> str:
        """Facilita√ß√£o de auto-reflex√£o"""
        reflection_prompt = f"""
MISS√ÉO: Facilita√ß√£o de auto-reflex√£o e insight
T√ìPICO: {message}

PERGUNTAS SOCR√ÅTICAS:
- O que voc√™ realmente sabe vs assume sobre isso?
- Que evid√™ncias sustentam sua perspectiva?
- Como algu√©m com vis√£o oposta argumentaria?
- Que padr√µes voc√™ reconhece em situa√ß√µes similares?
- O que voc√™ aprendeu da √∫ltima vez que enfrentou isso?

METACOGNI√á√ÉO:
- Como voc√™ est√° pensando sobre esse problema?
- Que emo√ß√µes est√£o influenciando sua an√°lise?
- Onde voc√™ pode estar sendo seu pior inimigo?
- Que recursos internos voc√™ j√° possui mas n√£o est√° usando?

FRAMEWORK DE GROWTH MINDSET:
- Desafios ‚Üí Oportunidades de crescimento
- Obst√°culos ‚Üí Feedback para ajustar estrat√©gia  
- Esfor√ßo ‚Üí Caminho para maestria
- Cr√≠ticas ‚Üí Fonte de insights valiosos
- Sucesso dos outros ‚Üí Inspira√ß√£o e aprendizado

ENTREGA: Insights profundos + blind spots revelados + plano de desenvolvimento pessoal
"""
        
        messages = [
            {"role": "system", "content": self.get_system_prompt()},
            {"role": "user", "content": reflection_prompt}
        ]
        
        return await self.call_ollama(context.get("model", self.default_model), messages)


# Fun√ß√£o legacy para compatibilidade
def agent(message: str, history: List[Dict[str, str]]):
    """Fun√ß√£o legacy - usar ReflexivoAgent() diretamente"""
    import asyncio
    
    agent_instance = ReflexivoAgent()
    
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    
    result = loop.run_until_complete(
        agent_instance.process(message, history)
    )
    
    return {"reply": result}
