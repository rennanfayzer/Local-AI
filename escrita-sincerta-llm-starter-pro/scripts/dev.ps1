# ==========================================
# ESCRITA SINCERTA LLM - SCRIPT DE DESENVOLVIMENTO (Windows)
# ==========================================

param(
    [string]$Command = "help",
    [string]$File = "",
    [switch]$Force = $false
)

# Configura√ß√µes
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

# Cores para PowerShell
$Colors = @{
    Red = "Red"
    Green = "Green" 
    Yellow = "Yellow"
    Blue = "Blue"
    Cyan = "Cyan"
    White = "White"
}

function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Colors[$Color]
}

function Show-Header {
    Write-ColorOutput "ü§ñ Escrita Sincerta LLM - Ambiente de Desenvolvimento" "Blue"
    Write-ColorOutput "====================================================" "Blue"
    Write-Host ""
}

function Test-Prerequisites {
    Write-ColorOutput "üîç Verificando pr√©-requisitos..." "Yellow"
    
    # Verifica Docker
    try {
        $dockerVersion = docker --version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ Docker: $dockerVersion" "Green"
        } else {
            throw "Docker n√£o encontrado"
        }
    } catch {
        Write-ColorOutput "‚ùå Docker n√£o est√° instalado ou n√£o est√° no PATH" "Red"
        Write-ColorOutput "   Baixe em: https://docs.docker.com/desktop/install/windows-install/" "Red"
        exit 1
    }
    
    # Verifica Docker Compose
    try {
        $composeVersion = docker compose version 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ Docker Compose: $composeVersion" "Green"
        } else {
            throw "Docker Compose n√£o encontrado"
        }
    } catch {
        Write-ColorOutput "‚ùå Docker Compose n√£o dispon√≠vel" "Red"
        exit 1
    }
    
    # Verifica arquivo .env
    if (-not (Test-Path ".env")) {
        if (Test-Path ".env.example") {
            Write-ColorOutput "üìã Copiando .env.example para .env..." "Yellow"
            Copy-Item ".env.example" ".env"
            Write-ColorOutput "‚úÖ Arquivo .env criado" "Green"
        } else {
            Write-ColorOutput "‚ö†Ô∏è  Arquivo .env.example n√£o encontrado" "Yellow"
        }
    } else {
        Write-ColorOutput "‚úÖ Arquivo .env encontrado" "Green"
    }
    
    Write-Host ""
}

function Start-Services {
    Write-ColorOutput "üöÄ Iniciando servi√ßos..." "Green"
    
    try {
        docker compose up -d --build
        
        if ($LASTEXITCODE -eq 0) {
            Write-ColorOutput "‚úÖ Servi√ßos iniciados com sucesso!" "Green"
            Write-Host ""
            Write-ColorOutput "üåê Acessos dispon√≠veis:" "Blue"
            Write-ColorOutput "   ‚Ä¢ Open WebUI: http://localhost:3000" "Cyan"
            Write-ColorOutput "   ‚Ä¢ API: http://localhost:8000" "Cyan"  
            Write-ColorOutput "   ‚Ä¢ PostgreSQL: localhost:5432" "Cyan"
            Write-ColorOutput "   ‚Ä¢ Ollama: http://localhost:11434" "Cyan"
            Write-Host ""
        } else {
            throw "Erro ao iniciar servi√ßos"
        }
    } catch {
        Write-ColorOutput "‚ùå Falha ao iniciar servi√ßos: $($_.Exception.Message)" "Red"
        exit 1
    }
}

function Stop-Services {
    Write-ColorOutput "üõë Parando servi√ßos..." "Yellow"
    
    try {
        docker compose down
        Write-ColorOutput "‚úÖ Servi√ßos parados" "Green"
    } catch {
        Write-ColorOutput "‚ùå Erro ao parar servi√ßos: $($_.Exception.Message)" "Red"
    }
}

function Show-Logs {
    Write-ColorOutput "üìã Mostrando logs dos servi√ßos..." "Blue"
    docker compose logs -f --tail=100
}

function Pull-Models {
    Write-ColorOutput "üì• Baixando modelos LLM..." "Green"
    
    # Verifica se Ollama est√° rodando
    $maxRetries = 30
    $retries = 0
    
    do {
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:11434/api/tags" -TimeoutSec 5 -ErrorAction Stop
            break
        } catch {
            $retries++
            if ($retries -ge $maxRetries) {
                Write-ColorOutput "‚ùå Ollama n√£o est√° dispon√≠vel ap√≥s $maxRetries tentativas" "Red"
                Write-ColorOutput "   Execute: .\dev.ps1 start" "Yellow"
                exit 1
            }
            Write-ColorOutput "‚è≥ Aguardando Ollama... ($retries/$maxRetries)" "Yellow"
            Start-Sleep -Seconds 2
        }
    } while ($retries -lt $maxRetries)
    
    # Executa script de pull
    if (Test-Path "scripts\pull-models.sh") {
        # Se WSL estiver dispon√≠vel
        try {
            wsl bash scripts/pull-models.sh
        } catch {
            Write-ColorOutput "‚ö†Ô∏è  WSL n√£o dispon√≠vel, usando PowerShell..." "Yellow"
            Pull-ModelsWindows
        }
    } else {
        Pull-ModelsWindows
    }
}

function Pull-ModelsWindows {
    # Implementa√ß√£o PowerShell para pull de modelos
    $models = @("phi3:3.8b", "qwen2.5:7b", "llama3.1:8b-instruct")
    
    foreach ($model in $models) {
        Write-ColorOutput "üì• Baixando modelo: $model" "Green"
        
        try {
            $body = @{ name = $model } | ConvertTo-Json
            Invoke-RestMethod -Uri "http://localhost:11434/api/pull" -Method Post -Body $body -ContentType "application/json" -TimeoutSec 300
            Write-ColorOutput "‚úÖ Modelo $model baixado com sucesso" "Green"
        } catch {
            Write-ColorOutput "‚ùå Erro ao baixar $model" "Red"
        }
    }
}

function Ingest-Documents {
    param([string]$Path = "data/docs")
    
    Write-ColorOutput "üìö Iniciando ingest√£o de documentos..." "Green"
    
    try {
        $body = @{ path = $Path } | ConvertTo-Json
        $response = Invoke-RestMethod -Uri "http://localhost:8000/ingest" -Method Post -Body $body -ContentType "application/json"
        
        Write-ColorOutput "‚úÖ Ingest√£o conclu√≠da: $($response.files_processed) arquivos processados" "Green"
    } catch {
        Write-ColorOutput "‚ùå Erro na ingest√£o: $($_.Exception.Message)" "Red"
        
        # Tenta com curl se dispon√≠vel
        try {
            & curl -s -X POST "http://localhost:8000/ingest" -H "Content-Type: application/json" -d "{`"path`":`"$Path`"}"
        } catch {
            Write-ColorOutput "‚ùå curl tamb√©m n√£o est√° dispon√≠vel" "Red"
        }
    }
}

function Show-Status {
    Write-ColorOutput "üìä Status dos Servi√ßos" "Blue"
    Write-ColorOutput "=====================" "Blue"
    
    # Status dos containers
    docker compose ps
    Write-Host ""
    
    # Health checks
    Write-ColorOutput "üè• Health Checks" "Blue"
    
    # API
    try {
        $apiResponse = Invoke-RestMethod -Uri "http://localhost:8000/health" -TimeoutSec 5
        Write-ColorOutput "‚úÖ API: $($apiResponse.api_status)" "Green"
    } catch {
        Write-ColorOutput "‚ùå API: indispon√≠vel" "Red"
    }
    
    # Ollama
    try {
        Invoke-WebRequest -Uri "http://localhost:11434/api/tags" -TimeoutSec 5 | Out-Null
        Write-ColorOutput "‚úÖ Ollama: ok" "Green"
    } catch {
        Write-ColorOutput "‚ùå Ollama: indispon√≠vel" "Red"
    }
    
    # Open WebUI
    try {
        Invoke-WebRequest -Uri "http://localhost:3000" -TimeoutSec 5 | Out-Null
        Write-ColorOutput "‚úÖ Open WebUI: ok" "Green"
    } catch {
        Write-ColorOutput "‚ùå Open WebUI: indispon√≠vel" "Red"
    }
}

function Reset-Environment {
    if (-not $Force) {
        $confirmation = Read-Host "‚ö†Ô∏è  Isso ir√° remover todos os dados. Confirma? (y/N)"
        if ($confirmation -ne "y" -and $confirmation -ne "Y") {
            Write-ColorOutput "‚ùå Opera√ß√£o cancelada" "Yellow"
            return
        }
    }
    
    Write-ColorOutput "üîÑ Resetando ambiente..." "Yellow"
    
    # Para servi√ßos
    docker compose down -v --remove-orphans
    
    # Remove volumes
    $volumes = docker volume ls -q --filter "name=escrita-sincerta" 2>$null
    if ($volumes) {
        docker volume rm $volumes 2>$null
    }
    
    Write-ColorOutput "‚úÖ Ambiente resetado" "Green"
    Write-ColorOutput "   Execute: .\dev.ps1 start" "Yellow"
}

function Open-Shell {
    param([string]$Service = "api")
    
    Write-ColorOutput "üêö Abrindo shell no container: $Service" "Blue"
    
    try {
        docker compose exec $Service bash
    } catch {
        # Tenta com sh se bash n√£o estiver dispon√≠vel
        try {
            docker compose exec $Service sh
        } catch {
            Write-ColorOutput "‚ùå Erro ao acessar shell do container $Service" "Red"
        }
    }
}

function Show-Help {
    Write-ColorOutput "üìö Comandos Dispon√≠veis" "Blue"
    Write-ColorOutput "======================" "Blue"
    Write-Host ""
    Write-ColorOutput "üöÄ Principais:" "Green"
    Write-Host "   start         - Inicia todos os servi√ßos"
    Write-Host "   stop          - Para todos os servi√ßos" 
    Write-Host "   restart       - Reinicia servi√ßos"
    Write-Host "   status        - Mostra status dos servi√ßos"
    Write-Host ""
    Write-ColorOutput "üì• Modelos e Dados:" "Green"
    Write-Host "   pull          - Baixa modelos LLM"
    Write-Host "   ingest        - Ingere documentos do data/docs"
    Write-Host "   ingest-file   - Ingere arquivo espec√≠fico (-File path)"
    Write-Host ""
    Write-ColorOutput "üîç Debug:" "Green"
    Write-Host "   logs          - Mostra logs dos servi√ßos"
    Write-Host "   shell         - Acessa shell do container (-Service nome)"
    Write-Host ""
    Write-ColorOutput "üßπ Limpeza:" "Green"
    Write-Host "   reset         - Reset completo (-Force para sem confirma√ß√£o)"
    Write-Host ""
    Write-ColorOutput "üí° Exemplos:" "Yellow"
    Write-Host "   .\dev.ps1 start"
    Write-Host "   .\dev.ps1 pull"
    Write-Host "   .\dev.ps1 ingest-file -File 'meu-arquivo.md'"
    Write-Host "   .\dev.ps1 shell -Service postgres"
    Write-Host "   .\dev.ps1 reset -Force"
}

# Fun√ß√£o principal
function Main {
    Show-Header
    
    switch ($Command.ToLower()) {
        "start" { 
            Test-Prerequisites
            Start-Services 
        }
        "stop" { Stop-Services }
        "restart" { 
            Stop-Services
            Start-Services 
        }
        "pull" { Pull-Models }
        "ingest" { Ingest-Documents }
        "ingest-file" { 
            if ($File) {
                Ingest-Documents -Path $File
            } else {
                Write-ColorOutput "‚ùå Especifique o arquivo: -File path" "Red"
            }
        }
        "logs" { Show-Logs }
        "status" { Show-Status }
        "reset" { Reset-Environment }
        "shell" { 
            $service = if ($File) { $File } else { "api" }
            Open-Shell -Service $service
        }
        "help" { Show-Help }
        default { 
            Write-ColorOutput "‚ùå Comando desconhecido: $Command" "Red"
            Write-Host ""
            Show-Help
        }
    }
}

# Execu√ß√£o
try {
    Main
} catch {
    Write-ColorOutput "‚ùå Erro inesperado: $($_.Exception.Message)" "Red"
    exit 1
}